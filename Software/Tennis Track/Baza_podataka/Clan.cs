//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tennis_Track.Baza_podataka
{
    using System;
    using System.Collections.Generic;
    
    public partial class Clan
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Clan()
        {
            this.Mecs = new HashSet<Mec>();
            this.Mecs1 = new HashSet<Mec>();
            this.Rezervacijes = new HashSet<Rezervacije>();
            this.Turnirs = new HashSet<Turnir>();
        }
    
        public int ID { get; set; }
        public string Ime { get; set; }
        public string Prezime { get; set; }
        public string KorisnickoIme { get; set; }
        public string Email { get; set; }
        public string Telefon { get; set; }
        public byte[] HashLozinke { get; set; }
        public byte[] SaltLozinke { get; set; }
        public string TipClana { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Mec> Mecs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Mec> Mecs1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Rezervacije> Rezervacijes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Turnir> Turnirs { get; set; }


        private int ukupnoPobjeda;
        public int UkupnoPobjeda
        {
            get { return VratiBrojPobjeda(); }
            set { ukupnoPobjeda = value; }
        }

        private int sluzbenePobjede;
        public int SluzbenePobjede
        {
            get { return VratiBrojSluzbenihPobjeda(); }
            set { sluzbenePobjede = value; }
        }

        private int brojBodova;
        public int BrojBodova
        {
            get { return VratiBrojSluzbenihPobjeda()*10; }
            set { brojBodova = value; }
        }

        private int VratiBrojSluzbenihPobjeda()
        {
            int brPobjeda = 0;
            int setoviIgrac1, setoviIgrac2;
            foreach (Mec mec in Mecs)
            {
                if(mec.Turnir_Id!=null)
                {
                    setoviIgrac1 = 0;
                    setoviIgrac2 = 0;
                    foreach (Set set in mec.Sets)
                    {
                        if (set.Rezultat_prvi_clan > set.Rezultat_drugi_clan)
                            setoviIgrac1++;
                        else setoviIgrac2++;
                    }
                    if ((setoviIgrac1 > setoviIgrac2))
                        brPobjeda++;
                }
            }
            foreach (Mec mec in Mecs1)
            {
                if (mec.Turnir_Id != null)
                {
                    setoviIgrac1 = 0;
                    setoviIgrac2 = 0;
                    foreach (Set set in mec.Sets)
                    {
                        if (set.Rezultat_prvi_clan > set.Rezultat_drugi_clan)
                            setoviIgrac1++;
                        else setoviIgrac2++;
                    }
                    if ((setoviIgrac1 < setoviIgrac2))
                        brPobjeda++;
                }
            }
            return brPobjeda;
        }

        private int VratiBrojPobjeda()
        {
            int brPobjeda = 0;
            int setoviIgrac1, setoviIgrac2;
            foreach (Mec mec in Mecs)
            {
                setoviIgrac1 = 0;
                setoviIgrac2 = 0;
                foreach (Set set in mec.Sets)
                {
                    if (set.Rezultat_prvi_clan > set.Rezultat_drugi_clan)
                          setoviIgrac1++;
                    else setoviIgrac2++;
                }
                if ((setoviIgrac1 > setoviIgrac2))
                    brPobjeda++;
            }
            foreach (Mec mec in Mecs1)
            {
                setoviIgrac1 = 0;
                setoviIgrac2 = 0;
                foreach (Set set in mec.Sets)
                {
                    if (set.Rezultat_prvi_clan > set.Rezultat_drugi_clan)
                        setoviIgrac1++;
                    else setoviIgrac2++;
                }
                if ((setoviIgrac1 < setoviIgrac2))
                    brPobjeda++;
            }
            return brPobjeda;
        }
    }
}
